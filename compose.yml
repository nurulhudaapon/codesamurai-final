version: "3.7"

services:
  redis:
    image: redis:6-alpine
    container_name: redis
    ports:
      - "6379:6379"

    networks:
      - backend

  cube:
    container_name: cube
    image: cubejs/cube
    ports:
      - 4000:4000
      - 15432:15432
    env_file: ./packages/cube/.env
    volumes:
      - ./packages/cube:/cube/conf

    networks:
      - backend

  db:
    image: postgres:15.3
    command: [ "postgres", "-c", "log_statement=all" ]
    container_name: db
    ports:
      - "5432:5432"

    environment:
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_DB: ${DATABASE_NAME}

    volumes:
      - postgres-data:/var/lib/postgresql/data

    networks:
      - backend

  web:
    container_name: web
    build:
      dockerfile: Dockerfile.web
    ports:
      - 3000:3000
    networks:
      - backend

  db-api:
    image: postgrest/postgrest:v11.1.0
    container_name: db-api
    ports:
      - '127.0.0.1:8080:8080'
      - '127.0.0.1:8081:8081'
    environment:
      PGRST_SERVER_PORT: 8080
      PGRST_ADMIN_SERVER_PORT: 8081
      PGRST_DB_URI: postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@db/${DATABASE_NAME}
      PGRST_DB_SCHEMA: public
      PGRST_DB_ANON_ROLE: postgres
      PGRST_JWT_SECRET: ${AUTH_JWT_SECRET}
      PGRST_OPENAPI_SERVER_PROXY_URI: http://127.0.0.1:8080
    depends_on:
      - db
    networks:
      - backend

networks:
  backend:


volumes:
  postgres-data:
