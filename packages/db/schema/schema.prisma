datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "./generated/zod" // default is ./generated/zod
  // useMultipleFiles                 = true // default is false
  // writeBarrelFiles                 = false // default is true
  createInputTypes = false // default is true
  // createModelTypes         = false // default is true
  // addInputTypeValidation   = true // default is true
  addIncludeType   = false // default is true
  addSelectType    = false // default is true
  // validateWhereUniqueInput         = true // default is false
  // createOptionalDefaultValuesTypes = true // default is false
  // createRelationValuesTypes        = true // default is false
  // createPartialTypes               = true // default is false
  // useDefaultValidators             = false // default is true
  // coerceDate                       = false // default is true
  // writeNullishInModelTypes = true // default is false
  // prismaClientPath                 = "./path/to/prisma/client" // default is client output path
}

// generate prisma client
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./../README.md"
  title    = "EcoSync Database"
}

/// @namespace Accounts
/// Represents user in the system.
/// This model stores information about user.
model user {
  /// Unique identifier for the user.
  id String @id @default(uuid()) @db.Uuid

  /// Timestamp indicating when the user was created.
  created_at DateTime @default(now()) @db.Timestamptz(6)

  /// Timestamp indicating when the user was last updated.
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  /// First name of the user (optional).
  first_name String? @db.VarChar(100)

  /// Last name of the user (optional).
  last_name String? @db.VarChar(100)

  /// Email address of the user.
  email String @db.VarChar(320)

  /// Phone number of the user.
  phone String @db.VarChar(80)

  /// Timestamp indicating when the user last logged in (optional).
  last_login_at DateTime? @db.Timestamptz(6)

  /// Password associated with the user (optional).
  password String? @db.VarChar(255)

  /// Role of the user (default sts).
  role_id String? @db.Uuid

  /// State of the user (default active).
  state user_state @default(active)

  // Relation to the role
  role role? @relation(fields: [role_id], references: [id])

  creator_transportation transportation[]
  vehicle                vehicle[]

  // manager_sts sts[] @relation(name: "manager_sts")
  creator_sts sts[] @relation(name: "creator_sts")

  createor_landfill landfill[] @relation(name: "creator_landfill")
  // manager_landfill  landfill[] @relation(name: "manager_landfill")
  issue             issue[]
  post              post[]

  /// Index for searching by HubSpot ID
  @@index([email, password])
}

/// @namespace Accounts
/// List of role that a user can have.
model role {
  /// Unique identifier for the role.
  id String @id @default(uuid()) @db.Uuid

  /// Timestamp indicating when the role was created.
  created_at DateTime @default(now()) @db.Timestamptz(6)

  /// Timestamp indicating when the role was last updated.
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  /// Name/slug of the role.
  slug String @db.VarChar(100)

  /// Title of the role.
  title String @db.Text

  user            user[]
  role_permission role_permission[]

  /// Index for searching by name
  @@index([slug])
}

/// @namespace Accounts
/// Represents the permission that a role can have.
model permission {
  /// Unique identifier for the permission.
  id String @id @default(uuid()) @db.Uuid

  /// Timestamp indicating when the permission was created.
  created_at DateTime @default(now()) @db.Timestamptz(6)

  /// Timestamp indicating when the permission was last updated.
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  /// Name/slug of the permission.
  slug String @db.VarChar(100)

  /// Title of the permission.
  title           String            @db.Text
  role_permission role_permission[]

  /// Index for searching by name
  @@index([slug])
}

/// @namespace Accounts
/// Represents the relationship between role and permission.
model role_permission {
  /// Unique identifier for the role permission.
  id String @id @default(uuid()) @db.Uuid

  /// Timestamp indicating when the role permission was created.
  created_at DateTime @default(now()) @db.Timestamptz(6)

  /// Timestamp indicating when the role permission was last updated.
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  /// Role ID associated with the role permission.
  role_id String @db.Uuid

  /// Permission ID associated with the role permission.
  permission_id String @db.Uuid

  /// Relation to the role
  role role @relation(fields: [role_id], references: [id])

  /// Relation to the permission
  permission permission @relation(fields: [permission_id], references: [id])

  /// Index for searching by role and permission
  @@index([role_id, permission_id])
}

enum user_state {
  /// Active state.
  active

  /// Inactive state.
  inactive
}

model vehicle {
  /// Unique identifier for the vehicle.
  id String @id @default(uuid()) @db.Uuid

  /// Timestamp indicating when the vehicle was created.
  created_at DateTime @default(now()) @db.Timestamptz(6)

  /// Timestamp indicating when the vehicle was last updated.
  updated_at         DateTime @default(now()) @db.Timestamptz(6)
  created_by_user_id String   @db.Uuid
  sts_id             String   @db.Uuid

  /// Vehicle number.
  number String @db.VarChar(100)

  /// Type of the vehicle.
  type vehicle_type

  /// Capacity of the vehicle.
  capacity      vehicle_capacity
  /// Fuel cost per Kilometer when full load.
  loaded_cost   Float?
  /// Fuel cost per Kilometer when empty load.
  unloaded_cost Float?

  transportation_logs transportation[]

  /// Relation to the user who created
  user user @relation(fields: [created_by_user_id], references: [id])
  sts  sts  @relation(fields: [sts_id], references: [id])

  /// Index for searching by vehicle number
  @@index([number])
}

model sts {
  /// Unique identifier for the STS.
  id String @id @default(uuid()) @db.Uuid

  name String

  /// Timestamp indicating when the STS was created.
  created_at DateTime @default(now()) @db.Timestamptz(6)

  /// Timestamp indicating when the STS was last updated.
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  created_by_user_id String @db.Uuid

  /// Ward number of the STS.
  ward_number String @db.VarChar(100)

  /// Capacity of the STS.
  capacity_tonnes Float

  /// GPS coordinates of the STS.
  latitude  Float
  longitude Float

  /// STS manager ID associated with the STS.
  manager_id String @db.Uuid

  /// Relation to the STS manager
  // sts_managers        user[]

  transportations transportation[]

  /// Relation to the user who created
  creator            user                 @relation(fields: [created_by_user_id], references: [id], name: "creator_sts")
  vehicles           vehicle[]
  contractor_company contractor_company[]

  /// Index for searching by ward number
  @@index([ward_number])
}

model landfill {
  /// Unique identifier for the STS.
  id String @id @default(uuid()) @db.Uuid

  /// Name of the landfill
  name String

  /// Timestamp indicating when the STS was created.
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  // User ID associated with the landfill entry.
  // Meaning the user is manager of the landfill
  created_by_user_id String @db.Uuid //TODO: Rename to manager_id

  /// Capacity of the STS.
  capacity_tonnes Float

  /// GPS coordinates of the STS.
  latitude  Float
  longitude Float

  /// Operational time
  opens_at  String
  closes_at String

  /// Relation to the STS manager
  // managers            user[]
  transportations transportation[]

  /// Relation to the user who created
  creator user @relation(fields: [created_by_user_id], references: [id], name: "creator_landfill")
}

model transportation {
  /// Unique identifier for the STS entry.
  id String @id @default(uuid()) @db.Uuid

  /// Timestamp indicating when the STS entry was created.
  created_at DateTime @default(now()) @db.Timestamptz(6)

  /// Timestamp indicating when the STS entry was last updated.
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  /// User ID associated with the landfill entry.
  created_by_user_id String @db.Uuid

  /// STS ID associated with the STS entry.
  sts_id String? @db.Uuid

  /// Landfill ID where the wast is dumped
  landfill_id String? @db.Uuid

  /// Vehicle ID associated with the STS entry.
  vehicle_id String @db.Uuid

  /// Volume of waste.
  volume Float

  /// Time of arrival.
  arrival_time DateTime?

  /// Time of departure.
  departure_time DateTime?

  // padding for the vehicle to reach the location - true if the vehicle is already at the location
  // false if the vehicle is on the way to the location
  padding Boolean

  /// Distance from the STS to the landfill.
  distance Float

  /// Type of the location.
  location_type transportation_location_type?

  /// Relation to the STS
  sts      sts?      @relation(fields: [sts_id], references: [id])
  landfill landfill? @relation(fields: [landfill_id], references: [id])

  /// Relation to the vehicle
  vehicle vehicle @relation(fields: [vehicle_id], references: [id])

  /// Relation to the user who created
  creator user @relation(fields: [created_by_user_id], references: [id])

  /// Index for searching by STS ID
  @@index([sts_id])
}

// • Users should be able to report issues related to waste management, such as overflowing
// bins, littering, illegal dumping, or damaged infrastructure.
// • Reporting functionalities should include options to provide details such as location, type
// of issue, description, and photo attachments.
// • Anonymous reporting options should be available for users who prefer not to disclose their
// identity.
// */

model issue {
  /// Unique identifier for the STS.
  id String @id @default(uuid()) @db.Uuid

  /// Title of the issue
  title       String
  description String

  /// Type of the issue - overflowing bins, littering, illegal dumping, or damaged infrastructure.
  type String

  /// Attachments of the issue
  attachments String[]

  /// Timestamp indicating when the report was issued
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  // User who reported the issue
  created_by_user_id String? @db.Uuid

  /// GPS coordinates of the STS.
  latitude  Float
  /// GPS coordinates of the STS.
  longitude Float

  /// Relation to the user who created
  user user? @relation(fields: [created_by_user_id], references: [id])
}

model post {
  /// Unique identifier for the STS.
  id String @id @default(uuid()) @db.Uuid

  /// Content of the post
  content String

  /// Type of the post: event, announcement, post
  type post_type

  /// Attachments of the post
  attachments String[]

  /// Timestamp indicating when the post was made
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  // User who created the post
  created_by_user_id String? @db.Uuid

  /// Relation to the user who created
  user user? @relation(fields: [created_by_user_id], references: [id])
}

model contractor_company {
  /// Unique identifier for the contractor company.
  id String @id @default(uuid()) @db.Uuid

  /// Name of the company
  name String

  /// Contract ID
  contract_id String

  /// Registration ID
  registration_id String

  /// Registration Date
  registration_date DateTime

  /// TIN of the company
  tin String

  /// Contact number
  contact_number String

  /// Workforce size
  workforce_size Int

  /// Payment per tonnage of waste
  payment_per_tonnage Float

  /// The required amount of waste per day
  required_amount_per_day Float

  /// Contract duration
  contract_duration String

  /// Area of collection
  area_of_collection String

  /// Designated STS
  sts_id String @db.Uuid

  /// Relation to the STS
  sts sts @relation(fields: [sts_id], references: [id])
}

enum post_type {
  /// Event
  event

  /// Announcement
  announcement

  /// Post
  post
}

enum transportation_location_type {
  /// STS location type.
  sts

  /// Landfill location type.
  landfill
}

enum vehicle_type {
  /// Open Truck type.
  open_truck

  /// Dump Truck type.
  dump_truck

  /// Compactor type.
  compactor

  /// Container Carrier type.
  container_carrier
}

enum vehicle_capacity {
  /// 3 ton capacity.
  three_ton

  /// 5 ton capacity.
  five_ton

  /// 7 ton capacity.
  seven_ton

  /// 15 ton capacity.
  fifteen_ton
}
